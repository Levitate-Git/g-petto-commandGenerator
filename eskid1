"""             
        # First user inputted frame
        elif pos == list_positions[1]:
            end_velocity = average_speed_of_frames[i]     
            if len(stopped_frames) > 0:
                
                if stopped_frames[0] == 0:
                    # if we have a stopped frame at the very first frame
                    times_and_velocities_for_end_effector = time_calculate.stopped_frame(time_vs_u)
                    stopped_frames.pop(0)
                    s += 1
                    frame_counter_control = False
                    
                    while len(stopped_frames) > 0 and stopped_frames[0] == s:
                        # If there are any other stopped frames just comes after from the very first frame.
                        times_and_velocities_for_end_effector = time_calculate.stopped_frame(time_vs_u)
                        stopped_frames.pop(0)
                        s += 1
                                               
                    
                
                if len(stopped_frames) > 0 and stopped_frames[0] == s+1:
                    end_velocity = float(0) # Because there is a stop frame after this frame end_velocity assigned as zero.
                    times_and_velocities_for_end_effector = time_calculate.solving_with_jerk_control(pos,list_positions, end_velocity,time_vs_u,xs,zs)
                    s += 1
                    times_and_velocities_for_end_effector = time_calculate.stopped_frame(time_vs_u)
                    stopped_frames.pop(0)
                    s += 1
                    frame_counter_control =False
                    cont = False
                    while len(stopped_frames) > 0 and stopped_frames[0] == s:
                    # If there are any other stopped frames just comes after this frame.
                        times_and_velocities_for_end_effector = time_calculate.stopped_frame(time_vs_u)
                        stopped_frames.pop(0)
                        s += 1
                  
            for frames in zero_end_velocity_frames:
                if pos == frames:
                    end_velocity = float(0)
            
            if cont:
                times_and_velocities_for_end_effector = time_calculate.solving_with_jerk_control(pos,list_positions,end_velocity,time_vs_u,xs,zs)
                s += 1
            #if frame_counter_control:
             #   s += 1
            i += 1
            enter = False
        # Last user inputted frame
        elif pos == list_positions[-1]:
            end_velocity = float(0) # because it is the last frame end_velocity assigned as zero.
            times_and_velocities_for_end_effector = time_calculate.solving_with_jerk_control(pos,list_positions,end_velocity,time_vs_u,xs,zs)
                     
            while len(stopped_frames) > 0 :
                # To control whether there are any stopped frames before last frame.
                times_and_velocities_for_end_effector = time_calculate.stopped_frame(time_vs_u)
                stopped_frames.pop(0)
            
            enter = False 
            

        
        # Middle user inputted frames
        # Computing for user inputted stop frames
        elif len(stopped_frames)>0:
            if stopped_frames[0] == s+1:
                end_velocity = float(0) # Because there is a stop frame after this frame end_velocity assigned as zero.
                times_and_velocities_for_end_effector = time_calculate.solving_with_jerk_control(pos,list_positions, end_velocity,time_vs_u,xs,zs)
                s +=1
                times_and_velocities_for_end_effector = time_calculate.stopped_frame(time_vs_u)
                stopped_frames.pop(0)
                s += 1
                i += 1
                
                enter = False
                while len(stopped_frames) > 0 and stopped_frames[0] == s:
                # If there are any other stopped frames just comes after this frame.
                    times_and_velocities_for_end_effector = time_calculate.stopped_frame(time_vs_u)
                    stopped_frames.pop(0)
                    s += 1
            

        # Computing for standart frames
        if enter:
            end_velocity = average_velocities[i] 
            for frames in zero_end_velocity_frames:
                if pos == frames:
                    end_velocity = float(0) 
            
            times_and_velocities_for_end_effector = time_calculate.solving_with_jerk_control(pos,list_positions, end_velocity,time_vs_u,xs,zs)
            s += 1
            i += 1           
        new_pos = pos
"""